package com.uw.css.cve;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class VulnerabilityMapCreator {
    public static String BASE_URL = "https://www.cvedetails.com";
    public static void main(String[] args) {
        String vendor = "Novell";
        List<Product> products = getProducts(vendor);
        for(Product product: products){
            List<Vulnerability> vulnerabilities = getVulnerabilities(product);
            exportVulnerabilitiesToCsv(vulnerabilities,product.name,vendor);
        }
    }

    private static List<Vulnerability> getVulnerabilities(Product product) {
        List<Vulnerability> vulnerabilities = new ArrayList<>();
        Document doc;
        try {
            //Get Document object after parsing the html from given url.
            doc = Jsoup.connect(BASE_URL+product.url).get();
            Elements elements1 = doc.select("div[id=pagingb]").get(0).getElementsByTag("a");
            int pages = elements1.size();
            for(int page = 1;page<=pages;page++){
                doc = Jsoup.connect("https://www.cvedetails.com/vulnerability-list.php?vendor_id="+product.vendorId+"&product_id="+product.productId+"&version_id=&page="+page+"&hasexp=0&opdos=0&opec=0&opov=0&opcsrf=0&opgpriv=0&opsqli=0&opxss=0&opdirt=0&opmemc=0&ophttprs=0&opbyp=0&opfileinc=0&opginf=0&cvssscoremin=0&cvssscoremax=0&year=0&month=0&cweid=0&order=1&trc="+product.noVulnerabilities+"&sha=8ebf49de00457acc1b38c265099e4ca148634101").get();
                Elements elements = doc.select("table[id=vulnslisttable] tr[class=srrowns]");
//            int pages = 1;
                int size = elements.size();
                for(int j=0;j<size;j++){
                    Element element = elements.get(j);
                    Elements children = element.getElementsByTag("td");
                    String cveId = children.get(1).text();
                    String cweName = children.get(2).getElementsByTag("a").attr("title");
                    String cweId = children.get(2).text();
                    String category = children.get(4).text();
                    String date = children.get(5).text();
                    Vulnerability vulnerability = new Vulnerability(cveId,cweName,cweId,product.name,date,category);
                    vulnerabilities.add(vulnerability);
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
        return vulnerabilities;
    }
    private static void exportVulnerabilitiesToCsv(List<Vulnerability> vulnerabilities,String product,String vendor) {
        try {
            File file = new File("./output/"+vendor);
            //Creating the directory
            boolean bool = file.mkdir();
            PrintWriter out = new PrintWriter(new FileWriter("./output/"+vendor+"/"+product+".csv"));

            out.println("CVE ID,CWE NAME,CWE ID,PRODUCT,Publish Date,Vulnerability Type(s)");
            for(Vulnerability vulnerability : vulnerabilities) {
                out.println(vulnerability.toString());
            }

            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static List<Product> getProducts(String vendor) {
        List<Product> products = new ArrayList<>();
        try {
            try (BufferedReader br = new BufferedReader(new FileReader("./output/"+vendor+".csv"))) {
                String line;
                line = br.readLine();
                String[] headers = line.split(",");
                while ((line = br.readLine()) != null) {
                    String[] values = line.split(",");
                    products.add(new Product(values[0],Integer.valueOf(values[3]),Integer.valueOf(values[4]),values[1],Integer.valueOf(values[2]),vendor));
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return products;
    }
}
